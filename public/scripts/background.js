(()=>{var t,e={1281:()=>{},5340:()=>{},7746:(t,e,r)=>{"use strict";class a{static async encrypt(t,e){return this.encryptForBrowser(t,e)}static async decrypt(t,e){return this.decryptForBrowser(t,e)}static generateRandomBytes(t){return crypto.getRandomValues(new Uint8Array(t))}static async simpleHash(t){const e=(new TextEncoder).encode(t),r=await crypto.subtle.digest("SHA-256",e);return Array.from(new Uint8Array(r)).map(t=>t.toString(16).padStart(2,"0")).join("")}static generateSalt(){return crypto.getRandomValues(new Uint8Array(32))}static async hashPassword(t,e){const r=(new TextEncoder).encode(t),a=new Uint8Array(r.length+e.length);a.set(r),a.set(e,r.length);const s=await crypto.subtle.digest("SHA-256",a);return Array.from(new Uint8Array(s)).map(t=>t.toString(16).padStart(2,"0")).join("")}static async encryptForBrowser(t,e){const r=new TextEncoder,a=crypto.getRandomValues(new Uint8Array(16)),s=await crypto.subtle.importKey("raw",r.encode(e),"PBKDF2",!1,["deriveBits","deriveKey"]),i=await crypto.subtle.deriveKey({name:"PBKDF2",salt:a,iterations:1e4,hash:"SHA-256"},s,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),n=crypto.getRandomValues(new Uint8Array(12)),o=await crypto.subtle.encrypt({name:"AES-GCM",iv:n},i,r.encode(t)),c=new Uint8Array(a.length+n.length+o.byteLength);return c.set(a,0),c.set(n,a.length),c.set(new Uint8Array(o),a.length+n.length),Array.from(c).map(t=>t.toString(16).padStart(2,"0")).join("")}static async decryptForBrowser(t,e){const r=new TextEncoder,a=new TextDecoder,s=new Uint8Array(t.match(/.{1,2}/g).map(t=>parseInt(t,16))),i=s.slice(0,16),n=s.slice(16,28),o=s.slice(28),c=await crypto.subtle.importKey("raw",r.encode(e),"PBKDF2",!1,["deriveBits","deriveKey"]),l=await crypto.subtle.deriveKey({name:"PBKDF2",salt:i,iterations:1e4,hash:"SHA-256"},c,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),h=await crypto.subtle.decrypt({name:"AES-GCM",iv:n},l,o);return a.decode(h)}}class s{static isValidEthereumAddress(t){return/^0x[a-fA-F0-9]{40}$/.test(t)}static isValidPrivateKey(t){return/^0x[a-fA-F0-9]{64}$/.test(t)}static isValidMnemonic(t){const e=t.trim().split(/\s+/);if(![12,15,18,21,24].includes(e.length))return!1;const r=/^[a-zA-Z]+$/;return e.every(t=>r.test(t))}static isStrongPassword(t){return t.length<8?{isValid:!1,message:"密码长度至少8位"}:/[A-Z]/.test(t)?/[a-z]/.test(t)?/[0-9]/.test(t)?{isValid:!0,message:"密码强度良好"}:{isValid:!1,message:"密码必须包含至少一个数字"}:{isValid:!1,message:"密码必须包含至少一个小写字母"}:{isValid:!1,message:"密码必须包含至少一个大写字母"}}static isValidAmount(t){if(!/^\d+(\.\d+)?$/.test(t))return!1;const e=parseFloat(t);return e>0&&e<Number.MAX_SAFE_INTEGER}static isValidGasPrice(t){if(!/^\d+(\.\d+)?$/.test(t))return!1;const e=parseFloat(t);return e>0&&e<=1e3}static formatAddress(t){return t.toLowerCase().trim()}static shortenAddress(t,e=6,r=4){return this.isValidEthereumAddress(t)?`${t.slice(0,e)}...${t.slice(-r)}`:t}static isValidNetworkId(t){return["1","5","11155111"].includes(t)}static formatAmount(t,e=6){const r=parseFloat(t);return isNaN(r)?"0":r.toFixed(e).replace(/\.?0+$/,"")}}class i{static async set(t,e){return new Promise((r,a)=>{chrome.storage.local.set({[t]:e},()=>{chrome.runtime.lastError?a(chrome.runtime.lastError):r()})})}static async get(t){return new Promise((e,r)=>{chrome.storage.local.get([t],a=>{chrome.runtime.lastError?r(chrome.runtime.lastError):e(a[t])})})}static async remove(t){return new Promise((e,r)=>{chrome.storage.local.remove([t],()=>{chrome.runtime.lastError?r(chrome.runtime.lastError):e()})})}static async clear(){return new Promise((t,e)=>{chrome.storage.local.clear(()=>{chrome.runtime.lastError?e(chrome.runtime.lastError):t()})})}static async getAll(){return new Promise((t,e)=>{chrome.storage.local.get(null,r=>{chrome.runtime.lastError?e(chrome.runtime.lastError):t(r)})})}static async saveWallet(t){await this.set(this.WALLET_KEY,t)}static async getWallet(){return await this.get(this.WALLET_KEY)}static async removeWallet(){await this.remove(this.WALLET_KEY)}static async saveSettings(t){await this.set(this.SETTINGS_KEY,t)}static async getSettings(){return{autoLock:!0,lockTimeout:15,showTestNetworks:!1,currency:"USD",...await this.get(this.SETTINGS_KEY)}}static async saveCurrentNetwork(t){await this.set(this.NETWORK_KEY,t)}static async getCurrentNetwork(){return await this.get(this.NETWORK_KEY)||"1"}static async saveCustomTokens(t){await this.set(this.TOKENS_KEY,t)}static async getCustomTokens(){return await this.get(this.TOKENS_KEY)||[]}static async saveTransactionHistory(t){await this.set(this.TRANSACTIONS_KEY,t)}static async getTransactionHistory(){return await this.get(this.TRANSACTIONS_KEY)||[]}static async addTransaction(t){const e=await this.getTransactionHistory();e.unshift(t),e.length>100&&e.splice(100),await this.saveTransactionHistory(e)}}i.WALLET_KEY="wallet_data",i.SETTINGS_KEY="wallet_settings",i.NETWORK_KEY="current_network",i.TOKENS_KEY="custom_tokens",i.TRANSACTIONS_KEY="transaction_history";class n{static getCurrentNetwork(){return this.NETWORKS[this.currentNetworkId]}static setCurrentNetwork(t){if(!this.NETWORKS[t])throw new Error(`不支持的网络ID: ${t}`);this.currentNetworkId=t}static getAllNetworks(){return Object.values(this.NETWORKS)}static async sendRpcRequest(t,e=[]){const r=this.getCurrentNetwork(),a=await fetch(r.rpcUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",id:Date.now(),method:t,params:e})});if(!a.ok)throw new Error(`网络请求失败: ${a.statusText}`);const s=await a.json();if(s.error)throw new Error(`RPC错误: ${s.error.message}`);return s.result}static async getBalance(t){try{const e=await this.sendRpcRequest("eth_getBalance",[t,"latest"]);return this.weiToEth(e)}catch(t){return console.error("获取余额失败:",t),"0"}}static async getTransactionCount(t){const e=await this.sendRpcRequest("eth_getTransactionCount",[t,"latest"]);return parseInt(e,16)}static async getGasPrice(){const t=await this.sendRpcRequest("eth_gasPrice");return this.weiToGwei(t)}static async estimateGas(t){const e=await this.sendRpcRequest("eth_estimateGas",[t]);return parseInt(e,16).toString()}static async sendRawTransaction(t){return await this.sendRpcRequest("eth_sendRawTransaction",[t])}static async getTransaction(t){return await this.sendRpcRequest("eth_getTransactionByHash",[t])}static async getTransactionReceipt(t){return await this.sendRpcRequest("eth_getTransactionReceipt",[t])}static async getBlockNumber(){const t=await this.sendRpcRequest("eth_blockNumber");return parseInt(t,16)}static weiToEth(t){const e=BigInt(t);return(Number(e)/Math.pow(10,18)).toFixed(6)}static ethToWei(t){const e=parseFloat(t);return"0x"+BigInt(Math.floor(e*Math.pow(10,18))).toString(16)}static weiToGwei(t){const e=BigInt(t);return(Number(e)/Math.pow(10,9)).toFixed(2)}static gweiToWei(t){const e=parseFloat(t);return"0x"+BigInt(Math.floor(e*Math.pow(10,9))).toString(16)}static getTransactionUrl(t){return`${this.getCurrentNetwork().blockExplorerUrl}/tx/${t}`}static getAddressUrl(t){return`${this.getCurrentNetwork().blockExplorerUrl}/address/${t}`}static async checkConnection(){try{return await this.getBlockNumber(),!0}catch(t){return console.error("网络连接检查失败:",t),!1}}}var o,c;n.NETWORKS={1:{id:"1",name:"以太坊主网",rpcUrl:"https://mainnet.infura.io/v3/YOUR_INFURA_KEY",chainId:1,symbol:"ETH",blockExplorerUrl:"https://etherscan.io"},5:{id:"5",name:"Goerli测试网",rpcUrl:"https://goerli.infura.io/v3/YOUR_INFURA_KEY",chainId:5,symbol:"ETH",blockExplorerUrl:"https://goerli.etherscan.io"},11155111:{id:"11155111",name:"Sepolia测试网",rpcUrl:"https://sepolia.infura.io/v3/YOUR_INFURA_KEY",chainId:11155111,symbol:"ETH",blockExplorerUrl:"https://sepolia.etherscan.io"}},n.currentNetworkId="1",function(t){t.EVM="evm",t.SOLANA="solana",t.APTOS="aptos"}(o||(o={})),function(t){t.MAINNET="mainnet",t.TESTNET="testnet",t.LAYER2="layer2"}(c||(c={}));var l=r(5642),h=r(1187),u=r(9770),d=r(2724),g=r(4532),m=r(1442),p=r(749);class w{constructor(t){this.config=t}getChainConfig(){return this.config}validateMnemonic(t){return p.JB(t)}async generateSeed(t){if(!this.validateMnemonic(t))throw new Error("无效的助记词");return await p.nl(t)}formatBalance(t,e){return(parseFloat(t)/Math.pow(10,e)).toFixed(6)}parseAmount(t,e){return(parseFloat(t)*Math.pow(10,e)).toString()}}class y extends w{constructor(t){super(t),this.provider=new l.FR(t.rpcUrl)}async generateWallet(t,e="m/44'/60'/0'/0/0"){try{const r=await this.generateSeed(t),a=h.QX.fromSeed(r).derivePath(e);return{address:a.address,privateKey:a.privateKey}}catch(t){throw new Error(`生成钱包失败: ${t.message}`)}}async getBalance(t){try{const e=await this.provider.getBalance(t);return u.ck(e)}catch(t){throw new Error(`获取余额失败: ${t.message}`)}}async getTokenBalance(t,e){try{const r=["function balanceOf(address owner) view returns (uint256)","function decimals() view returns (uint8)"],a=new d.NZ(e,r,this.provider),s=await a.balanceOf(t),i=await a.decimals();return u.Js(s,i)}catch(t){throw new Error(`获取代币余额失败: ${t.message}`)}}async estimateGas(t){try{const e={to:t.to,value:u.g5(t.value),data:t.data||"0x"},r=await this.provider.estimateGas(e),a=await this.provider.getFeeData(),s=a.gasPrice||u.XS("20","gwei"),i=u.ck(r*s),n={gasLimit:r.toString(),gasPrice:s.toString(),estimatedCost:i};return a.maxFeePerGas&&a.maxPriorityFeePerGas&&(n.maxFeePerGas=a.maxFeePerGas.toString(),n.maxPriorityFeePerGas=a.maxPriorityFeePerGas.toString()),n}catch(t){throw new Error(`Gas估算失败: ${t.message}`)}}async sendTransaction(t,e){try{const r=new g.u(e,this.provider),a={to:t.to,value:u.g5(t.value)};return t.gasLimit&&(a.gasLimit=t.gasLimit),t.gasPrice?a.gasPrice=t.gasPrice:t.maxFeePerGas&&t.maxPriorityFeePerGas&&(a.maxFeePerGas=t.maxFeePerGas,a.maxPriorityFeePerGas=t.maxPriorityFeePerGas),t.data&&(a.data=t.data),void 0!==t.nonce&&(a.nonce=t.nonce),{hash:(await r.sendTransaction(a)).hash,status:"pending"}}catch(t){throw new Error(`发送交易失败: ${t.message}`)}}async getTransactionStatus(t){try{if(!await this.provider.getTransaction(t))throw new Error("交易不存在");const e=await this.provider.getTransactionReceipt(t);return e?{hash:t,status:1===e.status?"confirmed":"failed",blockNumber:e.blockNumber,gasUsed:e.gasUsed.toString(),effectiveGasPrice:e.gasPrice?.toString()}:{hash:t,status:"pending"}}catch(t){throw new Error(`获取交易状态失败: ${t.message}`)}}async getNFTs(t){try{return[]}catch(t){throw new Error(`获取NFT失败: ${t.message}`)}}validateAddress(t){try{return m.PW(t)}catch{return!1}}async getTransactionHistory(t,e=1,r=20){try{return[]}catch(t){throw new Error(`获取交易历史失败: ${t.message}`)}}async getTokenInfo(t){try{const e=["function name() view returns (string)","function symbol() view returns (string)","function decimals() view returns (uint8)","function totalSupply() view returns (uint256)"],r=new d.NZ(t,e,this.provider),[a,s,i,n]=await Promise.all([r.name(),r.symbol(),r.decimals(),r.totalSupply()]);return{address:t,name:a,symbol:s,decimals:i,totalSupply:n.toString(),chainId:this.config.id}}catch(t){throw new Error(`获取代币信息失败: ${t.message}`)}}async simulateTransaction(t){try{const e={to:t.to,value:u.g5(t.value),data:t.data||"0x"};return{success:!0,result:await this.provider.call(e),gasEstimate:await this.estimateGas(t)}}catch(t){return{success:!1,error:t.message,gasEstimate:null}}}}var f=r(6189),v=r(1498),T=r(4545),E=r(9215),C=r(7680),P=r(6763),b=r.n(P),S=r(8947),A=r.n(S);class F{constructor(t){this.config=t,this.connection=new f.Ng(t.rpcUrl,"confirmed")}getChainConfig(){return this.config}async generateWallet(t,e="m/44'/501'/0'/0'"){try{if(!p.JB(t))throw new Error("无效的助记词");const r=await p.nl(t),a=(0,C.derivePath)(e,r.toString("hex")).key,s=A().sign.keyPair.fromSeed(a),i=f.AX.fromSecretKey(s.secretKey);return{address:i.publicKey.toBase58(),privateKey:b().encode(i.secretKey)}}catch(t){throw new Error(`生成Solana钱包失败: ${t.message}`)}}async getBalance(t){try{const e=new f.J3(t);return(await this.connection.getBalance(e)/f.Sr).toString()}catch(t){throw new Error(`获取SOL余额失败: ${t.message}`)}}async getTokenBalance(t,e){try{const r=new f.J3(t),a=new f.J3(e),s=await(0,v.Ob)(a,r);try{const t=await(0,T.sU)(this.connection,s),e=await this.connection.getParsedAccountInfo(a),r=e.value?.data?.parsed?.info?.decimals||0;return(Number(t.amount)/Math.pow(10,r)).toString()}catch{return"0"}}catch(t){throw new Error(`获取SPL代币余额失败: ${t.message}`)}}async estimateGas(t){try{const e=await this.connection.getLatestBlockhash(),r=new f.J3(t.to),a=new f.J3(t.to),s=Math.floor(parseFloat(t.value)*f.Sr),i=new f.ZX({recentBlockhash:e.blockhash,feePayer:r});i.add(f.yq.transfer({fromPubkey:r,toPubkey:a,lamports:s}));const n=await this.connection.getFeeForMessage(i.compileMessage(),"confirmed"),o=(n.value||5e3)/f.Sr;return{gasLimit:"1",gasPrice:n.value?.toString()||"5000",estimatedCost:o.toString()}}catch(t){throw new Error(`估算Solana交易费用失败: ${t.message}`)}}async sendTransaction(t,e){try{const r=b().decode(e),a=f.AX.fromSecretKey(r),s=new f.J3(t.to),i=Math.floor(parseFloat(t.value)*f.Sr),n=await this.connection.getLatestBlockhash(),o=new f.ZX({recentBlockhash:n.blockhash,feePayer:a.publicKey});return o.add(f.yq.transfer({fromPubkey:a.publicKey,toPubkey:s,lamports:i})),{hash:await(0,f.El)(this.connection,o,[a],{commitment:"confirmed",preflightCommitment:"confirmed"}),status:"confirmed"}}catch(t){throw new Error(`发送Solana交易失败: ${t.message}`)}}async getTransactionStatus(t){try{const e=await this.connection.getSignatureStatus(t);if(!e.value)return{hash:t,status:"pending"};const r=e.value.confirmationStatus;let a;return a=e.value.err?"failed":"confirmed"===r||"finalized"===r?"confirmed":"pending",{hash:t,status:a,blockNumber:e.value.slot}}catch(t){throw new Error(`获取Solana交易状态失败: ${t.message}`)}}async getNFTs(t){try{const e=new f.J3(t),r=await this.connection.getParsedTokenAccountsByOwner(e,{programId:E.x5}),a=[];for(const t of r.value){const e=t.account.data.parsed.info;if(0===e.tokenAmount.decimals&&1===e.tokenAmount.uiAmount){const t=e.mint;a.push({tokenId:t,contractAddress:t,name:`Solana NFT ${t.slice(0,8)}`,chainId:this.config.id})}}return a}catch(t){throw new Error(`获取Solana NFT失败: ${t.message}`)}}validateAddress(t){try{return new f.J3(t),!0}catch{return!1}}async getTransactionHistory(t,e=20){try{const r=new f.J3(t),a=await this.connection.getSignaturesForAddress(r,{limit:e}),s=[];for(const t of a){const e=await this.connection.getParsedTransaction(t.signature);e&&s.push({hash:t.signature,blockTime:t.blockTime,slot:t.slot,status:t.err?"failed":"confirmed",fee:e.meta?.fee})}return s}catch(t){throw new Error(`获取Solana交易历史失败: ${t.message}`)}}async simulateTransaction(t,e){try{const r=new f.J3(e),a=new f.J3(t.to),s=Math.floor(parseFloat(t.value)*f.Sr),i=await this.connection.getLatestBlockhash(),n=new f.ZX({recentBlockhash:i.blockhash,feePayer:r});n.add(f.yq.transfer({fromPubkey:r,toPubkey:a,lamports:s}));const o=await this.connection.simulateTransaction(n);return{success:!o.value.err,error:o.value.err?.toString(),logs:o.value.logs,unitsConsumed:o.value.unitsConsumed}}catch(t){return{success:!1,error:t.message}}}}var k=r(741);class x{constructor(t){this.config=t,this.client=new k.HN(t.rpcUrl),this.coinClient=new k.P0(this.client),this.tokenClient=new k.J(this.client)}getChainConfig(){return this.config}async generateWallet(t,e="m/44'/637'/0'/0'/0'"){try{if(!p.JB(t))throw new Error("无效的助记词");const r=await p.nl(t),a=(0,C.derivePath)(e,r.toString("hex")).key,s=new k.dI(a);return{address:s.address().hex(),privateKey:s.toPrivateKeyObject().privateKeyHex}}catch(t){throw new Error(`生成Aptos钱包失败: ${t.message}`)}}async getBalance(t){try{const e=await this.coinClient.checkBalance(t);return(Number(e)/Math.pow(10,8)).toString()}catch(t){throw new Error(`获取APT余额失败: ${t.message}`)}}async getTokenBalance(t,e){try{const r=(await this.client.getAccountResources(t)).find(t=>t.type===`0x1::coin::CoinStore<${e}>`);if(!r)return"0";const a=r.data.coin.value;try{const t=(await this.client.getAccountResource(e.split("::")[0],`0x1::coin::CoinInfo<${e}>`)).data.decimals;return(Number(a)/Math.pow(10,t)).toString()}catch{return(Number(a)/Math.pow(10,8)).toString()}}catch(t){throw new Error(`获取Aptos代币余额失败: ${t.message}`)}}async estimateGas(t){try{const e=new k.dI,r=await this.client.generateTransaction(e.address(),{function:"0x1::coin::transfer",type_arguments:["0x1::aptos_coin::AptosCoin"],arguments:[t.to,Math.floor(parseFloat(t.value)*Math.pow(10,8)).toString()]}),a=await this.client.simulateTransaction(e,r),s=a[0]?.gas_used||"1000",i=a[0]?.gas_unit_price||"100";return{gasLimit:s,gasPrice:i,estimatedCost:(Number(s)*Number(i)/Math.pow(10,8)).toString()}}catch(t){return{gasLimit:"1000",gasPrice:"100",estimatedCost:"0.0001"}}}async sendTransaction(t,e){try{const r=new k.dI(Buffer.from(e.replace("0x",""),"hex")),a={type:"entry_function_payload",function:"0x1::coin::transfer",type_arguments:["0x1::aptos_coin::AptosCoin"],arguments:[t.to,Math.floor(parseFloat(t.value)*Math.pow(10,8)).toString()]},s=await this.client.generateTransaction(r.address(),a),i=await this.client.signTransaction(r,s),n=await this.client.submitTransaction(i);return await this.client.waitForTransaction(n.hash),{hash:n.hash,status:"confirmed"}}catch(t){throw new Error(`发送Aptos交易失败: ${t.message}`)}}async getTransactionStatus(t){try{const e=await this.client.getTransactionByHash(t);let r;return r="pending_transaction"===e.type?"pending":"user_transaction"===e.type?e.success?"confirmed":"failed":"confirmed",{hash:t,status:r,blockNumber:e.version||void 0}}catch(e){return{hash:t,status:"pending"}}}async getNFTs(t){try{return[]}catch(t){return console.error("获取Aptos NFT失败:",t.message),[]}}validateAddress(t){try{const e=t.replace("0x","");return/^[0-9a-fA-F]{64}$/.test(e)||/^[0-9a-fA-F]{1,64}$/.test(e)}catch{return!1}}async getTransactionHistory(t,e=20){try{return(await this.client.getAccountTransactions(t,{limit:e})).map(t=>({hash:t.hash,version:t.version,timestamp:t.timestamp,success:t.success,gasUsed:t.gas_used,gasUnitPrice:t.gas_unit_price,type:t.type}))}catch(t){throw new Error(`获取Aptos交易历史失败: ${t.message}`)}}async simulateTransaction(t,e){try{const e=new k.dI,r=await this.client.generateTransaction(e.address(),{function:"0x1::coin::transfer",type_arguments:["0x1::aptos_coin::AptosCoin"],arguments:[t.to,Math.floor(parseFloat(t.value)*Math.pow(10,8)).toString()]}),a=(await this.client.simulateTransaction(e,r))[0];return{success:a.success,gasUsed:a.gas_used,gasUnitPrice:a.gas_unit_price,vmStatus:a.vm_status,changes:a.changes}}catch(t){return{success:!1,error:t.message}}}}const M={ethereum:{id:"ethereum",name:"以太坊主网",type:o.EVM,category:c.MAINNET,rpcUrl:"https://eth-mainnet.g.alchemy.com/v2/demo",chainId:1,symbol:"ETH",decimals:18,blockExplorerUrl:"https://etherscan.io",iconUrl:"https://cryptologos.cc/logos/ethereum-eth-logo.png",isTestnet:!1},polygon:{id:"polygon",name:"Polygon主网",type:o.EVM,category:c.LAYER2,rpcUrl:"https://polygon-rpc.com",chainId:137,symbol:"MATIC",decimals:18,blockExplorerUrl:"https://polygonscan.com",iconUrl:"https://cryptologos.cc/logos/polygon-matic-logo.png",isTestnet:!1},bsc:{id:"bsc",name:"BSC主网",type:o.EVM,category:c.MAINNET,rpcUrl:"https://bsc-dataseed1.binance.org",chainId:56,symbol:"BNB",decimals:18,blockExplorerUrl:"https://bscscan.com",iconUrl:"https://cryptologos.cc/logos/bnb-bnb-logo.png",isTestnet:!1},arbitrum:{id:"arbitrum",name:"Arbitrum One",type:o.EVM,category:c.LAYER2,rpcUrl:"https://arb1.arbitrum.io/rpc",chainId:42161,symbol:"ETH",decimals:18,blockExplorerUrl:"https://arbiscan.io",iconUrl:"https://cryptologos.cc/logos/arbitrum-arb-logo.png",isTestnet:!1},optimism:{id:"optimism",name:"Optimism",type:o.EVM,category:c.LAYER2,rpcUrl:"https://mainnet.optimism.io",chainId:10,symbol:"ETH",decimals:18,blockExplorerUrl:"https://optimistic.etherscan.io",iconUrl:"https://cryptologos.cc/logos/optimism-ethereum-op-logo.png",isTestnet:!1},zksync:{id:"zksync",name:"zkSync Era",type:o.EVM,category:c.LAYER2,rpcUrl:"https://mainnet.era.zksync.io",chainId:324,symbol:"ETH",decimals:18,blockExplorerUrl:"https://explorer.zksync.io",iconUrl:"https://cryptologos.cc/logos/zksync-zk-logo.png",isTestnet:!1},solana:{id:"solana",name:"Solana主网",type:o.SOLANA,category:c.MAINNET,rpcUrl:"https://api.mainnet-beta.solana.com",symbol:"SOL",decimals:9,blockExplorerUrl:"https://explorer.solana.com",iconUrl:"https://cryptologos.cc/logos/solana-sol-logo.png",isTestnet:!1},aptos:{id:"aptos",name:"Aptos主网",type:o.APTOS,category:c.MAINNET,rpcUrl:"https://fullnode.mainnet.aptoslabs.com/v1",symbol:"APT",decimals:8,blockExplorerUrl:"https://explorer.aptoslabs.com",iconUrl:"https://cryptologos.cc/logos/aptos-apt-logo.png",isTestnet:!1},"ethereum-goerli":{id:"ethereum-goerli",name:"Ethereum Goerli",type:o.EVM,category:c.TESTNET,rpcUrl:"https://eth-goerli.g.alchemy.com/v2/demo",chainId:5,symbol:"ETH",decimals:18,blockExplorerUrl:"https://goerli.etherscan.io",iconUrl:"https://cryptologos.cc/logos/ethereum-eth-logo.png",isTestnet:!0},"ethereum-sepolia":{id:"ethereum-sepolia",name:"Sepolia测试网",type:o.EVM,category:c.TESTNET,rpcUrl:"https://eth-sepolia.g.alchemy.com/v2/demo",chainId:11155111,symbol:"ETH",decimals:18,blockExplorerUrl:"https://sepolia.etherscan.io",iconUrl:"https://cryptologos.cc/logos/ethereum-eth-logo.png",isTestnet:!0},"polygon-mumbai":{id:"polygon-mumbai",name:"Mumbai测试网",type:o.EVM,category:c.TESTNET,rpcUrl:"https://rpc-mumbai.maticvigil.com",chainId:80001,symbol:"MATIC",decimals:18,blockExplorerUrl:"https://mumbai.polygonscan.com",iconUrl:"https://cryptologos.cc/logos/polygon-matic-logo.png",isTestnet:!0},"arbitrum-goerli":{id:"arbitrum-goerli",name:"Arbitrum Goerli",type:o.EVM,category:c.TESTNET,rpcUrl:"https://goerli-rollup.arbitrum.io/rpc",chainId:421613,symbol:"ETH",decimals:18,blockExplorerUrl:"https://goerli.arbiscan.io",iconUrl:"https://cryptologos.cc/logos/arbitrum-arb-logo.png",isTestnet:!0},"optimism-goerli":{id:"optimism-goerli",name:"Optimism Goerli",type:o.EVM,category:c.TESTNET,rpcUrl:"https://goerli.optimism.io",chainId:420,symbol:"ETH",decimals:18,blockExplorerUrl:"https://goerli-optimism.etherscan.io",iconUrl:"https://cryptologos.cc/logos/optimism-ethereum-op-logo.png",isTestnet:!0},"zksync-testnet":{id:"zksync-testnet",name:"zkSync Era Testnet",type:o.EVM,category:c.TESTNET,rpcUrl:"https://testnet.era.zksync.dev",chainId:280,symbol:"ETH",decimals:18,blockExplorerUrl:"https://goerli.explorer.zksync.io",iconUrl:"https://cryptologos.cc/logos/zksync-zk-logo.png",isTestnet:!0},"bsc-testnet":{id:"bsc-testnet",name:"BSC Testnet",type:o.EVM,category:c.TESTNET,rpcUrl:"https://data-seed-prebsc-1-s1.binance.org:8545",chainId:97,symbol:"BNB",decimals:18,blockExplorerUrl:"https://testnet.bscscan.com",iconUrl:"https://cryptologos.cc/logos/bnb-bnb-logo.png",isTestnet:!0},"solana-devnet":{id:"solana-devnet",name:"Solana开发网",type:o.SOLANA,category:c.TESTNET,rpcUrl:"https://api.devnet.solana.com",symbol:"SOL",decimals:9,blockExplorerUrl:"https://explorer.solana.com?cluster=devnet",iconUrl:"https://cryptologos.cc/logos/solana-sol-logo.png",isTestnet:!0},"aptos-testnet":{id:"aptos-testnet",name:"Aptos测试网",type:o.APTOS,category:c.TESTNET,rpcUrl:"https://fullnode.testnet.aptoslabs.com/v1",symbol:"APT",decimals:8,blockExplorerUrl:"https://explorer.aptoslabs.com/?network=testnet",iconUrl:"https://cryptologos.cc/logos/aptos-apt-logo.png",isTestnet:!0}};Object.keys(M);const N=new class{constructor(){this.adapters=new Map,this.currentChainId="ethereum",this.initializeAdapters()}initializeAdapters(){Object.values(M).forEach(t=>{let e;switch(t.type){case o.EVM:e=new y(t);break;case o.SOLANA:e=new F(t);break;case o.APTOS:e=new x(t);break;default:return void console.warn(`不支持的链类型: ${t.type}`)}this.adapters.set(t.id,e)})}getCurrentAdapter(){const t=this.adapters.get(this.currentChainId);if(!t)throw new Error(`未找到链适配器: ${this.currentChainId}`);return t}getAdapter(t){const e=this.adapters.get(t);if(!e)throw new Error(`未找到链适配器: ${t}`);return e}switchChain(t){if(!this.adapters.has(t))throw new Error(`不支持的链: ${t}`);this.currentChainId=t}getCurrentChainId(){return this.currentChainId}getCurrentChainConfig(){return this.getCurrentAdapter().getChainConfig()}getSupportedChains(){return Object.values(M)}isChainSupported(t){return this.adapters.has(t)}async generateMultiChainWallet(t){const e={};for(const[r,a]of this.adapters)try{const s=await a.generateWallet(t);e[r]=s}catch(t){console.error(`生成${r}钱包失败:`,t.message)}return e}async getMultiChainBalances(t){const e={};for(const[r,a]of Object.entries(t))try{const t=this.getAdapter(r),s=await t.getBalance(a);e[r]=s}catch(t){console.error(`获取${r}余额失败:`,t.message),e[r]="0"}return e}async getBalance(t){return this.getCurrentAdapter().getBalance(t)}async getTokenBalance(t,e,r){return(r?this.getAdapter(r):this.getCurrentAdapter()).getTokenBalance(t,e)}async estimateGas(t,e){return(e?this.getAdapter(e):this.getCurrentAdapter()).estimateGas(t)}async sendTransaction(t,e,r){return(r?this.getAdapter(r):this.getCurrentAdapter()).sendTransaction(t,e)}async getTransactionStatus(t,e){return(e?this.getAdapter(e):this.getCurrentAdapter()).getTransactionStatus(t)}async getNFTs(t,e){return(e?this.getAdapter(e):this.getCurrentAdapter()).getNFTs(t)}async getMultiChainNFTs(t){const e=[];for(const[r,a]of Object.entries(t))try{const t=this.getAdapter(r),s=await t.getNFTs(a);e.push(...s)}catch(t){console.error(`获取${r} NFT失败:`,t.message)}return e}validateAddress(t,e){return(e?this.getAdapter(e):this.getCurrentAdapter()).validateAddress(t)}async getTransactionHistory(t,e=20,r){const a=r?this.getAdapter(r):this.getCurrentAdapter();if("getTransactionHistory"in a)return a.getTransactionHistory(t,e);throw new Error("当前链不支持交易历史查询")}async simulateTransaction(t,e,r){const a=r?this.getAdapter(r):this.getCurrentAdapter();if("simulateTransaction"in a)return a.simulateTransaction(t,e);throw new Error("当前链不支持交易模拟")}getChainType(t){return(t?this.getAdapter(t):this.getCurrentAdapter()).getChainConfig().type}isEVMChain(t){return this.getChainType(t)===o.EVM}isSolanaChain(t){return this.getChainType(t)===o.SOLANA}isAptosChain(t){return this.getChainType(t)===o.APTOS}getNativeTokenSymbol(t){return(t?this.getAdapter(t).getChainConfig():this.getCurrentChainConfig()).symbol||"ETH"}getNativeTokenDecimals(t){return t?this.getAdapter(t).getChainConfig():this.getCurrentChainConfig(),18}formatAmount(t,e,r){const a=e||this.getNativeTokenDecimals(r);return parseFloat(t).toFixed(Math.min(a,6))}parseAmount(t,e,r){const a=e||this.getNativeTokenDecimals(r),s=parseFloat(t);return Math.floor(s*Math.pow(10,a)).toString()}};var B;!function(t){t.HOUR_1="1h",t.HOUR_4="4h",t.HOUR_12="12h",t.DAY_1="1d",t.DAY_7="7d",t.DAY_30="30d",t.DAY_90="90d",t.YEAR_1="1y"}(B||(B={}));class I extends w{constructor(t){super(t),this.provider=new l.FR(t.rpcUrl)}async generateWallet(t,e="m/44'/60'/0'/0/0"){try{const r=await this.generateSeed(t),a=h.QX.fromSeed(r).derivePath(e);return{address:a.address,privateKey:a.privateKey}}catch(t){throw new Error(`生成Polygon钱包失败: ${t.message}`)}}async getBalance(t){try{const e=await this.provider.getBalance(t);return u.ck(e)}catch(t){throw new Error(`获取MATIC余额失败: ${t.message}`)}}async getTokenBalance(t,e){try{const r=new d.NZ(e,["function balanceOf(address) view returns (uint256)","function decimals() view returns (uint8)"],this.provider),[a,s]=await Promise.all([r.balanceOf(t),r.decimals()]);return u.Js(a,s)}catch(t){throw new Error(`获取代币余额失败: ${t.message}`)}}async estimateGas(t){try{const e=await this.provider.getFeeData(),r={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x"},a=await this.provider.estimateGas(r),s=e.gasPrice||u.XS("30","gwei"),i=e.maxFeePerGas||u.XS("40","gwei"),n=e.maxPriorityFeePerGas||u.XS("2","gwei"),o=a*s;return{gasLimit:a.toString(),gasPrice:u.Js(s,"gwei"),maxFeePerGas:u.Js(i,"gwei"),maxPriorityFeePerGas:u.Js(n,"gwei"),estimatedCost:u.ck(o)}}catch(t){throw new Error(`估算Gas失败: ${t.message}`)}}async sendTransaction(t,e){try{const r=new g.u(e,this.provider),a={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x",gasLimit:t.gasLimit||void 0,gasPrice:t.gasPrice?u.XS(t.gasPrice,"gwei"):void 0,maxFeePerGas:t.maxFeePerGas?u.XS(t.maxFeePerGas,"gwei"):void 0,maxPriorityFeePerGas:t.maxPriorityFeePerGas?u.XS(t.maxPriorityFeePerGas,"gwei"):void 0,nonce:t.nonce};return{hash:(await r.sendTransaction(a)).hash,status:"pending"}}catch(t){throw new Error(`发送交易失败: ${t.message}`)}}async getTransactionStatus(t){try{if(!await this.provider.getTransaction(t))throw new Error("交易不存在");const e=await this.provider.getTransactionReceipt(t);return e?{hash:t,status:1===e.status?"confirmed":"failed",blockNumber:e.blockNumber,gasUsed:e.gasUsed.toString(),effectiveGasPrice:e.gasPrice?.toString()}:{hash:t,status:"pending"}}catch(t){throw new Error(`获取交易状态失败: ${t.message}`)}}async getNFTs(t){try{return[]}catch(t){throw new Error(`获取NFT失败: ${t.message}`)}}validateAddress(t){try{return m.PW(t)}catch{return!1}}async getTransactionHistory(t,e=1,r=20){try{return[]}catch(t){throw new Error(`获取交易历史失败: ${t.message}`)}}async simulateTransaction(t){try{const e={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x"};return{success:!0,result:await this.provider.call(e)}}catch(t){return{success:!1,error:t.message}}}}class $ extends w{constructor(t){super(t),this.provider=new l.FR(t.rpcUrl)}async generateWallet(t,e="m/44'/60'/0'/0/0"){try{const r=await this.generateSeed(t),a=h.QX.fromSeed(r).derivePath(e);return{address:a.address,privateKey:a.privateKey}}catch(t){throw new Error(`生成Arbitrum钱包失败: ${t.message}`)}}async getBalance(t){try{const e=await this.provider.getBalance(t);return u.ck(e)}catch(t){throw new Error(`获取ETH余额失败: ${t.message}`)}}async getTokenBalance(t,e){try{const r=new d.NZ(e,["function balanceOf(address) view returns (uint256)","function decimals() view returns (uint8)"],this.provider),[a,s]=await Promise.all([r.balanceOf(t),r.decimals()]);return u.Js(a,s)}catch(t){throw new Error(`获取代币余额失败: ${t.message}`)}}async estimateGas(t){try{const e=await this.provider.getFeeData(),r={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x"},a=await this.provider.estimateGas(r),s=e.gasPrice||u.XS("0.1","gwei"),i=e.maxFeePerGas||u.XS("0.2","gwei"),n=e.maxPriorityFeePerGas||u.XS("0.01","gwei"),o=a*s,c=t.data?(t.data.length-2)/2:0,l=o+BigInt(16*c)*u.XS("20","gwei");return{gasLimit:a.toString(),gasPrice:u.Js(s,"gwei"),maxFeePerGas:u.Js(i,"gwei"),maxPriorityFeePerGas:u.Js(n,"gwei"),estimatedCost:u.ck(l)}}catch(t){throw new Error(`估算Gas失败: ${t.message}`)}}async sendTransaction(t,e){try{const r=new g.u(e,this.provider),a={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x",gasLimit:t.gasLimit||void 0,gasPrice:t.gasPrice?u.XS(t.gasPrice,"gwei"):void 0,maxFeePerGas:t.maxFeePerGas?u.XS(t.maxFeePerGas,"gwei"):void 0,maxPriorityFeePerGas:t.maxPriorityFeePerGas?u.XS(t.maxPriorityFeePerGas,"gwei"):void 0,nonce:t.nonce};return{hash:(await r.sendTransaction(a)).hash,status:"pending"}}catch(t){throw new Error(`发送交易失败: ${t.message}`)}}async getTransactionStatus(t){try{if(!await this.provider.getTransaction(t))throw new Error("交易不存在");const e=await this.provider.getTransactionReceipt(t);return e?{hash:t,status:1===e.status?"confirmed":"failed",blockNumber:e.blockNumber,gasUsed:e.gasUsed.toString(),effectiveGasPrice:e.gasPrice?.toString()}:{hash:t,status:"pending"}}catch(t){throw new Error(`获取交易状态失败: ${t.message}`)}}async getNFTs(t){try{return[]}catch(t){throw new Error(`获取NFT失败: ${t.message}`)}}validateAddress(t){try{return m.PW(t)}catch{return!1}}async getTransactionHistory(t,e=1,r=20){try{return[]}catch(t){throw new Error(`获取交易历史失败: ${t.message}`)}}async simulateTransaction(t){try{const e={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x"};return{success:!0,result:await this.provider.call(e)}}catch(t){return{success:!1,error:t.message}}}async getArbitrumInfo(){try{const t=await this.provider.getBlock("latest");return{latestL2Block:t?.number,l2BlockTime:t?.timestamp}}catch(t){throw new Error(`获取Arbitrum信息失败: ${t.message}`)}}}class G extends w{constructor(t){super(t),this.provider=new l.FR(t.rpcUrl)}async generateWallet(t,e="m/44'/60'/0'/0/0"){try{const r=await this.generateSeed(t),a=h.QX.fromSeed(r).derivePath(e);return{address:a.address,privateKey:a.privateKey}}catch(t){throw new Error(`生成zkSync钱包失败: ${t.message}`)}}async getBalance(t){try{const e=await this.provider.getBalance(t);return u.ck(e)}catch(t){throw new Error(`获取ETH余额失败: ${t.message}`)}}async getTokenBalance(t,e){try{const r=new d.NZ(e,["function balanceOf(address) view returns (uint256)","function decimals() view returns (uint8)"],this.provider),[a,s]=await Promise.all([r.balanceOf(t),r.decimals()]);return u.Js(a,s)}catch(t){throw new Error(`获取代币余额失败: ${t.message}`)}}async estimateGas(t){try{const e=await this.provider.getFeeData(),r={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x"},a=await this.provider.estimateGas(r),s=e.gasPrice||u.XS("0.25","gwei"),i=e.maxFeePerGas||u.XS("0.5","gwei"),n=e.maxPriorityFeePerGas||u.XS("0.01","gwei"),o=a*s;return{gasLimit:a.toString(),gasPrice:u.Js(s,"gwei"),maxFeePerGas:u.Js(i,"gwei"),maxPriorityFeePerGas:u.Js(n,"gwei"),estimatedCost:u.ck(o)}}catch(t){throw new Error(`估算Gas失败: ${t.message}`)}}async sendTransaction(t,e){try{const r=new g.u(e,this.provider),a={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x",gasLimit:t.gasLimit||void 0,gasPrice:t.gasPrice?u.XS(t.gasPrice,"gwei"):void 0,maxFeePerGas:t.maxFeePerGas?u.XS(t.maxFeePerGas,"gwei"):void 0,maxPriorityFeePerGas:t.maxPriorityFeePerGas?u.XS(t.maxPriorityFeePerGas,"gwei"):void 0,nonce:t.nonce};return{hash:(await r.sendTransaction(a)).hash,status:"pending"}}catch(t){throw new Error(`发送交易失败: ${t.message}`)}}async getTransactionStatus(t){try{if(!await this.provider.getTransaction(t))throw new Error("交易不存在");const e=await this.provider.getTransactionReceipt(t);return e?{hash:t,status:1===e.status?"confirmed":"failed",blockNumber:e.blockNumber,gasUsed:e.gasUsed.toString(),effectiveGasPrice:e.gasPrice?.toString()}:{hash:t,status:"pending"}}catch(t){throw new Error(`获取交易状态失败: ${t.message}`)}}async getNFTs(t){try{return[]}catch(t){throw new Error(`获取NFT失败: ${t.message}`)}}validateAddress(t){try{return m.PW(t)}catch{return!1}}async getTransactionHistory(t,e=1,r=20){try{return[]}catch(t){throw new Error(`获取交易历史失败: ${t.message}`)}}async simulateTransaction(t){try{const e={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x"};return{success:!0,result:await this.provider.call(e)}}catch(t){return{success:!1,error:t.message}}}async getzkSyncInfo(){try{const t=await this.provider.getBlock("latest");return{latestBlock:t?.number,blockTime:t?.timestamp,zkSyncVersion:"Era"}}catch(t){throw new Error(`获取zkSync信息失败: ${t.message}`)}}async getNonce(t){try{return await this.provider.getTransactionCount(t,"pending")}catch(t){throw new Error(`获取nonce失败: ${t.message}`)}}}var U=r(9453);class O extends w{constructor(t){super(t),this.provider=new l.FR(t.rpcUrl)}async generateWallet(t,e="m/44'/60'/0'/0/0"){try{const r=await this.generateSeed(t),a=h.QX.fromSeed(r).derivePath(e);return{address:a.address,privateKey:a.privateKey}}catch(t){throw new Error(`生成Optimism钱包失败: ${t.message}`)}}async getBalance(t){try{const e=await this.provider.getBalance(t);return u.ck(e)}catch(t){throw new Error(`获取ETH余额失败: ${t.message}`)}}async getTokenBalance(t,e){try{const r=new d.NZ(e,["function balanceOf(address) view returns (uint256)","function decimals() view returns (uint8)"],this.provider),[a,s]=await Promise.all([r.balanceOf(t),r.decimals()]);return u.Js(a,s)}catch(t){throw new Error(`获取代币余额失败: ${t.message}`)}}async estimateGas(t){try{const e=await this.provider.getFeeData(),r={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x"},a=await this.provider.estimateGas(r),s=e.gasPrice||u.XS("0.001","gwei"),i=e.maxFeePerGas||u.XS("0.002","gwei"),n=e.maxPriorityFeePerGas||u.XS("0.0001","gwei"),o=a*s,c=t.data?(t.data.length-2)/2:0,l=o+BigInt(16*c)*u.XS("15","gwei");return{gasLimit:a.toString(),gasPrice:u.Js(s,"gwei"),maxFeePerGas:u.Js(i,"gwei"),maxPriorityFeePerGas:u.Js(n,"gwei"),estimatedCost:u.ck(l)}}catch(t){throw new Error(`估算Gas失败: ${t.message}`)}}async sendTransaction(t,e){try{const r=new g.u(e,this.provider),a={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x",gasLimit:t.gasLimit||void 0,gasPrice:t.gasPrice?u.XS(t.gasPrice,"gwei"):void 0,maxFeePerGas:t.maxFeePerGas?u.XS(t.maxFeePerGas,"gwei"):void 0,maxPriorityFeePerGas:t.maxPriorityFeePerGas?u.XS(t.maxPriorityFeePerGas,"gwei"):void 0,nonce:t.nonce};return{hash:(await r.sendTransaction(a)).hash,status:"pending"}}catch(t){throw new Error(`发送交易失败: ${t.message}`)}}async getTransactionStatus(t){try{if(!await this.provider.getTransaction(t))throw new Error("交易不存在");const e=await this.provider.getTransactionReceipt(t);return e?{hash:t,status:1===e.status?"confirmed":"failed",blockNumber:e.blockNumber,gasUsed:e.gasUsed.toString(),effectiveGasPrice:e.gasPrice?.toString()}:{hash:t,status:"pending"}}catch(t){throw new Error(`获取交易状态失败: ${t.message}`)}}async getNFTs(t){try{return[]}catch(t){throw new Error(`获取NFT失败: ${t.message}`)}}validateAddress(t){try{return m.PW(t)}catch{return!1}}async getTransactionHistory(t,e=1,r=20){try{return[]}catch(t){throw new Error(`获取交易历史失败: ${t.message}`)}}async simulateTransaction(t){try{const e={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x"};return{success:!0,result:await this.provider.call(e)}}catch(t){return{success:!1,error:t.message}}}async getOptimismInfo(){try{const t=await this.provider.getBlock("latest");return{latestL2Block:t?.number,l2BlockTime:t?.timestamp,rollupType:"Optimistic Rollup"}}catch(t){throw new Error(`获取Optimism信息失败: ${t.message}`)}}async getL1Fee(t){try{const e="0x420000000000000000000000000000000000000F",r=new d.NZ(e,["function getL1Fee(bytes) view returns (uint256)"],this.provider),a=U.Z.from({to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x"}).serialized,s=await r.getL1Fee(a);return u.ck(s)}catch(t){throw new Error(`获取L1费用失败: ${t.message}`)}}}var D=r(8982);class W extends w{constructor(t){super(t),this.provider=new l.FR(t.rpcUrl)}async generateWallet(t,e="m/44'/60'/0'/0/0"){try{const r=await this.generateSeed(t),a=h.QX.fromSeed(r).derivePath(e);return{address:a.address,privateKey:a.privateKey}}catch(t){throw new Error(`生成BSC钱包失败: ${t.message}`)}}async getBalance(t){try{const e=await this.provider.getBalance(t);return u.ck(e)}catch(t){throw new Error(`获取BNB余额失败: ${t.message}`)}}async getTokenBalance(t,e){try{const r=new d.NZ(e,["function balanceOf(address) view returns (uint256)","function decimals() view returns (uint8)"],this.provider),[a,s]=await Promise.all([r.balanceOf(t),r.decimals()]);return u.Js(a,s)}catch(t){throw new Error(`获取代币余额失败: ${t.message}`)}}async estimateGas(t){try{const e=await this.provider.getFeeData(),r={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x"},a=await this.provider.estimateGas(r),s=e.gasPrice||u.XS("5","gwei"),i=a*s;return{gasLimit:a.toString(),gasPrice:u.Js(s,"gwei"),estimatedCost:u.ck(i)}}catch(t){throw new Error(`估算Gas失败: ${t.message}`)}}async sendTransaction(t,e){try{const r=new g.u(e,this.provider),a={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x",gasLimit:t.gasLimit||void 0,gasPrice:t.gasPrice?u.XS(t.gasPrice,"gwei"):void 0,nonce:t.nonce};return{hash:(await r.sendTransaction(a)).hash,status:"pending"}}catch(t){throw new Error(`发送交易失败: ${t.message}`)}}async getTransactionStatus(t){try{if(!await this.provider.getTransaction(t))throw new Error("交易不存在");const e=await this.provider.getTransactionReceipt(t);return e?{hash:t,status:1===e.status?"confirmed":"failed",blockNumber:e.blockNumber,gasUsed:e.gasUsed.toString(),effectiveGasPrice:e.gasPrice?.toString()}:{hash:t,status:"pending"}}catch(t){throw new Error(`获取交易状态失败: ${t.message}`)}}async getNFTs(t){try{return[]}catch(t){throw new Error(`获取NFT失败: ${t.message}`)}}validateAddress(t){try{return m.PW(t)}catch{return!1}}async getTransactionHistory(t,e=1,r=20){try{return[]}catch(t){throw new Error(`获取交易历史失败: ${t.message}`)}}async simulateTransaction(t){try{const e={to:t.to,value:t.value?u.g5(t.value):0,data:t.data||"0x"};return{success:!0,result:await this.provider.call(e)}}catch(t){return{success:!1,error:t.message}}}async getPancakeSwapInfo(){try{const t="0x10ED43C718714eb63d5aA57B78B54704E256024E",e=new d.NZ(t,["function factory() view returns (address)","function WETH() view returns (address)"],this.provider),[r,a]=await Promise.all([e.factory(),e.WETH()]);return{routerAddress:t,factoryAddress:r,wbnbAddress:a}}catch(t){throw new Error(`获取PancakeSwap信息失败: ${t.message}`)}}async getTokenPrice(t,e="0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"){try{const r="0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73",a=new d.NZ(r,["function getPair(address,address) view returns (address)"],this.provider),s=await a.getPair(t,e);if(s===D.j)throw new Error("交易对不存在");const i=new d.NZ(s,["function getReserves() view returns (uint112,uint112,uint32)"],this.provider),n=await i.getReserves();return(Number(n[1])/Number(n[0])).toString()}catch(t){throw new Error(`获取代币价格失败: ${t.message}`)}}}class V{static createAdapter(t){const e=`${t.type}-${t.id}`;if(this.adapters.has(e))return this.adapters.get(e);let r;switch(t.type){case o.EVM:r=this.createEVMAdapter(t);break;case o.SOLANA:r=new F(t);break;case o.APTOS:r=new x(t);break;default:throw new Error(`不支持的链类型: ${t.type}`)}return this.adapters.set(e,r),r}static createEVMAdapter(t){switch(t.id){case"ethereum":case"ethereum-goerli":case"ethereum-sepolia":default:return new y(t);case"polygon":case"polygon-mumbai":return new I(t);case"arbitrum":case"arbitrum-goerli":case"arbitrum-nova":return new $(t);case"zksync":case"zksync-testnet":return new G(t);case"optimism":case"optimism-goerli":return new O(t);case"bsc":case"bsc-testnet":return new W(t)}}static getAdapter(t,e){const r=`${t}-${e}`;return this.adapters.get(r)}static removeAdapter(t,e){const r=`${t}-${e}`;return this.adapters.delete(r)}static clearAdapters(){this.adapters.clear()}static getAllAdapters(){return Array.from(this.adapters.values())}static isChainSupported(t,e){switch(t){case o.EVM:case o.SOLANA:case o.APTOS:return!0;default:return!1}}static getSupportedChains(){return["ethereum","ethereum-goerli","ethereum-sepolia","polygon","polygon-mumbai","arbitrum","arbitrum-goerli","arbitrum-nova","zksync","zksync-testnet","optimism","optimism-goerli","bsc","bsc-testnet","solana","solana-devnet","aptos","aptos-testnet"]}static createMultipleAdapters(t){return t.map(t=>this.createAdapter(t))}static validateChainConfig(t){try{return!!(t.id&&t.name&&t.type&&t.rpcUrl&&(new URL(t.rpcUrl),t.type!==o.EVM||t.chainId))}catch{return!1}}}V.adapters=new Map;class R{constructor(){this.adapters=new Map,this.wallets=new Map,this.currentChain="ethereum",this.initializeAdapters()}initializeAdapters(){Object.values(M).forEach(t=>{try{const e=V.createAdapter(t);this.adapters.set(t.id,e)}catch(e){console.warn(`Failed to initialize adapter for ${t.name}:`,e)}})}getAdapter(t){const e=this.adapters.get(t);if(!e)throw new Error(`不支持的链: ${t}`);return e}getSupportedChains(){return Array.from(this.adapters.values()).map(t=>t.getChainConfig())}setCurrentChain(t){if(!this.adapters.has(t))throw new Error(`不支持的链: ${t}`);this.currentChain=t}getCurrentChain(){return this.currentChain}getCurrentAdapter(){return this.getAdapter(this.currentChain)}async generateWalletsFromMnemonic(t){const e={};for(const[r,a]of this.adapters)try{const s=await a.generateWallet(t);e[r]=s,this.wallets.set(r,s)}catch(t){console.error(`Failed to generate wallet for ${r}:`,t)}return e}getWallet(t){return this.wallets.get(t)}getAllWalletAddresses(){const t={};for(const[e,r]of this.wallets)t[e]=r.address;return t}async getBalance(t,e){const r=this.getAdapter(t);return await r.getBalance(e)}async getAllBalances(){const t={};for(const[e,r]of this.wallets)try{const a=await this.getBalance(e,r.address);t[e]=a}catch(r){console.error(`Failed to get balance for ${e}:`,r),t[e]="0"}return t}async getTokenBalance(t,e,r){const a=this.getAdapter(t);return await a.getTokenBalance(e,r)}async estimateGas(t,e){const r=this.getAdapter(t);return await r.estimateGas(e)}async sendTransaction(t,e){const r=this.getAdapter(t),a=this.getWallet(t);if(!a)throw new Error(`未找到${t}链的钱包`);return await r.sendTransaction(e,a.privateKey)}async getTransactionStatus(t,e){const r=this.getAdapter(t);return await r.getTransactionStatus(e)}async getNFTs(t,e){const r=this.getAdapter(t);return await r.getNFTs(e)}async getAllNFTs(){const t={};for(const[e,r]of this.wallets)try{const a=await this.getNFTs(e,r.address);t[e]=a}catch(r){console.error(`Failed to get NFTs for ${e}:`,r),t[e]=[]}return t}validateAddress(t,e){return this.getAdapter(t).validateAddress(e)}async getAccountInfo(t,e){const r=this.getAdapter(t),a=await r.getBalance(e);return{address:e,balance:a,nativeBalance:a,tokens:[]}}getChainConfig(t){const e=function(t){return M[t]}(t);if(!e)throw new Error(`未找到链配置: ${t}`);return e}getChainsByType(t){return this.getSupportedChains().filter(e=>e.type===t)}getMainnetChains(){return this.getSupportedChains().filter(t=>!t.isTestnet)}getTestnetChains(){return this.getSupportedChains().filter(t=>t.isTestnet)}clearWallets(){this.wallets.clear()}hasWallets(){return this.wallets.size>0}getWalletStats(){const t=this.getSupportedChains(),e=t.filter(t=>t.type===o.EVM).length;return{totalChains:Object.keys(M).length,supportedChains:t.length,initializedWallets:this.wallets.size,evmChains:e,nonEvmChains:t.length-e}}}new R;class _{static async createWallet(t){const e=s.isStrongPassword(t);if(!e.isValid)throw new Error(e.message);try{const e=this.generateMnemonic(),{privateKey:r,address:s}=await this.generateWalletFromMnemonic(e),n=await this.chainManager.generateMultiChainWallet(e),o=await a.encrypt(r,t),c={};for(const[e,r]of Object.entries(n))c[e]=await a.encrypt(r.privateKey,t);const l={address:s,encryptedPrivateKey:o,mnemonic:await a.encrypt(e,t),createdAt:Date.now(),multiChainAddresses:Object.fromEntries(Object.entries(n).map(([t,e])=>[t,e.address])),encryptedMultiChainKeys:c};return await i.saveWallet(l),this.currentWallet=l,this.multiChainWallets=n,this.isUnlocked=!0,{wallet:l,mnemonic:e,multiChainAddresses:l.multiChainAddresses||{}}}catch(t){throw new Error(`创建钱包失败: ${t}`)}}static async importWallet(t,e,r){const n=s.isStrongPassword(r);if(!n.isValid)throw new Error(n.message);try{let n,o,c,l={};if("mnemonic"===e){if(!s.isValidMnemonic(t))throw new Error("无效的助记词格式");c=t;const e=await this.generateWalletFromMnemonic(c);n=e.privateKey,o=e.address,l=await this.chainManager.generateMultiChainWallet(c)}else{if(!s.isValidPrivateKey(t))throw new Error("无效的私钥格式");n=t,o=await this.getAddressFromPrivateKey(n)}const h=await a.encrypt(n,r),u={};for(const[t,e]of Object.entries(l))u[t]=await a.encrypt(e.privateKey,r);const d={address:o,encryptedPrivateKey:h,mnemonic:c?await a.encrypt(c,r):void 0,createdAt:Date.now(),multiChainAddresses:Object.fromEntries(Object.entries(l).map(([t,e])=>[t,e.address])),encryptedMultiChainKeys:u};return await i.saveWallet(d),this.currentWallet=d,this.multiChainWallets=l,this.isUnlocked=!0,{wallet:d,multiChainAddresses:d.multiChainAddresses||{}}}catch(t){throw new Error(`导入钱包失败: ${t}`)}}static async unlockWallet(t){try{const e=await i.getWallet();if(!e)throw new Error("未找到钱包");if(await a.decrypt(e.encryptedPrivateKey,t),e.encryptedMultiChainKeys)for(const[r,s]of Object.entries(e.encryptedMultiChainKeys)){const i=await a.decrypt(s,t),n=e.multiChainAddresses?.[r]||"";this.multiChainWallets[r]={address:n,privateKey:i}}return this.currentWallet=e,this.isUnlocked=!0,!0}catch(t){return console.error("解锁钱包失败:",t),!1}}static lockWallet(){this.currentWallet=null,this.isUnlocked=!1}static isWalletUnlocked(){return this.isUnlocked&&null!==this.currentWallet}static getCurrentAddress(){return this.currentWallet?.address||null}static async getBalance(){if(!this.isWalletUnlocked()||!this.currentWallet)throw new Error("钱包未解锁");return await n.getBalance(this.currentWallet.address)}static async sendTransaction(t,e){if(!this.isWalletUnlocked()||!this.currentWallet)throw new Error("钱包未解锁");try{const r=await a.decrypt(this.currentWallet.encryptedPrivateKey,e),s={nonce:"0x"+(await n.getTransactionCount(this.currentWallet.address)).toString(16),gasPrice:n.gweiToWei(t.gasPrice),gasLimit:"0x"+parseInt(t.gasLimit).toString(16),to:t.to,value:n.ethToWei(t.value),data:t.data||"0x"},o=await this.signTransaction(s,r),c=await n.sendRawTransaction(o);return await i.addTransaction({hash:c,from:this.currentWallet.address,to:t.to,value:t.value,gasPrice:t.gasPrice,timestamp:Date.now(),status:"pending"}),c}catch(t){throw new Error(`发送交易失败: ${t}`)}}static async walletExists(){return null!=await i.getWallet()}static async deleteWallet(){await i.removeWallet(),this.currentWallet=null,this.isUnlocked=!1}static generateMnemonic(){const t=["abandon","ability","able","about","above","absent","absorb","abstract","absurd","abuse","access","accident","account","accuse","achieve","acid","acoustic","acquire","across","act","action","actor","actress","actual","adapt","add","addict","address","adjust","admit","adult","advance","advice","aerobic","affair","afford","afraid","again","age","agent","agree","ahead","aim","air","airport","aisle","alarm","album"],e=[];for(let r=0;r<12;r++){const r=Math.floor(Math.random()*t.length);e.push(t[r])}return e.join(" ")}static async generateWalletFromMnemonic(t){const e="0x"+(await a.simpleHash(t)).slice(0,64);return{privateKey:e,address:await this.getAddressFromPrivateKey(e)}}static async getAddressFromPrivateKey(t){return"0x"+(await a.simpleHash(t)).slice(0,40)}static async signTransaction(t,e){const r=JSON.stringify(t);return"0x"+await a.simpleHash(r+e)}static async getMnemonic(t){if(!this.isWalletUnlocked()||!this.currentWallet)throw new Error("钱包未解锁");if(!this.currentWallet.mnemonic)return null;try{return await a.decrypt(this.currentWallet.mnemonic,t)}catch(t){throw new Error("密码错误")}}static get defi(){return _.defiService}static get bridge(){return _.bridgeService}static get nft(){return _.nftService}static get gas(){return _.gasService}}_.currentWallet=null,_.isUnlocked=!1,_.chainManager=N,_.priceService=new class{constructor(){this.priceCache=new Map,this.historyCache=new Map,this.marketDataCache=new Map,this.priceAlerts=new Map,this.providers=[],this.cacheTimeout=6e4,this.updateInterval=null,this.alertCheckInterval=null,this.initializeProviders(),this.startPriceUpdates(),this.startAlertMonitoring()}initializeProviders(){this.providers=[{name:"CoinGecko",priority:1,isActive:!0,rateLimit:50,lastRequest:0,errorCount:0},{name:"CoinMarketCap",priority:2,isActive:!0,rateLimit:30,lastRequest:0,errorCount:0},{name:"Binance",priority:3,isActive:!0,rateLimit:100,lastRequest:0,errorCount:0}]}async getPrice(t,e,r=!1){const a=`${t}_${e}`;if(!r){const t=this.priceCache.get(a);if(t&&t.expiry>Date.now())return t.data}try{const r=await this.fetchPriceFromProviders(t,e);return r&&(this.priceCache.set(a,{data:r,expiry:Date.now()+this.cacheTimeout}),this.checkPriceAlerts(t,e,r.price)),r}catch(t){return console.error("获取价格失败:",t),null}}async getPrices(t){const e=t.map(t=>this.getPrice(t.symbol,t.chainType));return(await Promise.allSettled(e)).filter(t=>"fulfilled"===t.status&&null!==t.value).map(t=>t.value)}async fetchPriceFromProviders(t,e){const r=this.providers.filter(t=>t.isActive).sort((t,e)=>t.priority-e.priority);for(const a of r)try{if(!this.checkRateLimit(a))continue;const r=await this.fetchFromProvider(a,t,e);if(r)return a.errorCount=0,r}catch(t){a.errorCount++,console.warn(`Provider ${a.name} failed:`,t.message),a.errorCount>=5&&(a.isActive=!1,setTimeout(()=>{a.isActive=!0,a.errorCount=0},3e5))}return null}async fetchFromProvider(t,e,r){switch(t.lastRequest=Date.now(),t.name){case"CoinGecko":return this.fetchFromCoinGecko(e,r);case"CoinMarketCap":return this.fetchFromCoinMarketCap(e,r);case"Binance":return this.fetchFromBinance(e,r);default:return null}}async fetchFromCoinGecko(t,e){try{const r=1e3*Math.random()+100,a=20*(Math.random()-.5);return{symbol:t,chainType:e,price:r,priceChange24h:a,priceChangePercentage24h:a/r*100,marketCap:1e6*r,volume24h:5e4*r,lastUpdated:(new Date).toISOString()}}catch(t){throw new Error(`CoinGecko API error: ${t.message}`)}}async fetchFromCoinMarketCap(t,e){try{const r=1e3*Math.random()+100,a=20*(Math.random()-.5);return{symbol:t,chainType:e,price:r,priceChange24h:a,priceChangePercentage24h:a/r*100,marketCap:1e6*r,volume24h:5e4*r,lastUpdated:(new Date).toISOString()}}catch(t){throw new Error(`CoinMarketCap API error: ${t.message}`)}}async fetchFromBinance(t,e){try{const r=1e3*Math.random()+100,a=20*(Math.random()-.5);return{symbol:t,chainType:e,price:r,priceChange24h:a,priceChangePercentage24h:a/r*100,volume24h:5e4*r,lastUpdated:(new Date).toISOString()}}catch(t){throw new Error(`Binance API error: ${t.message}`)}}checkRateLimit(t){return Date.now()-t.lastRequest>=6e4/t.rateLimit}async getPriceHistory(t,e,r,a=!1){const s=`${t}_${e}_${r}`;if(!a){const t=this.historyCache.get(s);if(t&&Date.now()-new Date(t.lastUpdated).getTime()<10*this.cacheTimeout)return t}try{const a=await this.fetchPriceHistory(t,e,r);return a&&this.historyCache.set(s,a),a}catch(t){return console.error("获取价格历史失败:",t),null}}async fetchPriceHistory(t,e,r){try{const a=this.getDataPointsForTimeframe(r),s=1e3*Math.random()+100,i=[];for(let t=0;t<a;t++){const e=new Date(Date.now()-(a-t)*this.getIntervalForTimeframe(r)),n=s*(1+.1*(Math.random()-.5));i.push({timestamp:e.toISOString(),price:n,volume:n*(1e3*Math.random()+100)})}return{symbol:t,chainType:e,timeframe:r,data:i,lastUpdated:(new Date).toISOString()}}catch(t){throw new Error(`Failed to fetch price history: ${t.message}`)}}getDataPointsForTimeframe(t){switch(t){case B.HOUR_1:return 60;case B.HOUR_4:return 48;case B.HOUR_12:return 72;case B.DAY_1:return 24;case B.DAY_7:return 168;case B.DAY_30:return 30;case B.DAY_90:return 90;case B.YEAR_1:return 365;default:return 24}}getIntervalForTimeframe(t){switch(t){case B.HOUR_1:return 6e4;case B.HOUR_4:return 3e5;case B.HOUR_12:return 6e5;case B.DAY_1:case B.DAY_7:return 36e5;case B.DAY_30:case B.DAY_90:case B.YEAR_1:return 864e5;default:return 36e5}}async getMarketData(t,e){const r=`${t}_${e}_market`,a=this.marketDataCache.get(r);if(a&&Date.now()-new Date(a.lastUpdated).getTime()<5*this.cacheTimeout)return a;try{const a=1e3*Math.random()+100,s={symbol:t,chainType:e,rank:Math.floor(100*Math.random())+1,price:a,marketCap:1e6*a,volume24h:5e4*a,circulatingSupply:1e6,totalSupply:1e6,maxSupply:1e6,ath:1.5*a,athDate:new Date(Date.now()-365*Math.random()*24*60*60*1e3).toISOString(),atl:.5*a,atlDate:new Date(Date.now()-365*Math.random()*24*60*60*1e3).toISOString(),priceChange1h:10*(Math.random()-.5),priceChange24h:20*(Math.random()-.5),priceChange7d:50*(Math.random()-.5),priceChange30d:100*(Math.random()-.5),lastUpdated:(new Date).toISOString()};return this.marketDataCache.set(r,s),s}catch(t){return console.error("获取市场数据失败:",t),null}}createPriceAlert(t,e,r,a){const s=this.generateAlertId(),i={id:s,symbol:t,chainType:e,targetPrice:r,condition:a,isActive:!0,createdAt:(new Date).toISOString(),notificationSent:!1};return this.priceAlerts.set(s,i),s}deletePriceAlert(t){return this.priceAlerts.delete(t)}getPriceAlert(t){return this.priceAlerts.get(t)}getAllPriceAlerts(){return Array.from(this.priceAlerts.values())}checkPriceAlerts(t,e,r){for(const a of this.priceAlerts.values())a.symbol===t&&a.chainType===e&&a.isActive&&!a.notificationSent&&("above"===a.condition&&r>=a.targetPrice||"below"===a.condition&&r<=a.targetPrice)&&(a.triggeredAt=(new Date).toISOString(),a.notificationSent=!0,a.isActive=!1,this.sendPriceAlertNotification(a,r))}sendPriceAlertNotification(t,e){console.log(`价格警报触发: ${t.symbol} 当前价格 $${e}, 目标价格 $${t.targetPrice}`)}startPriceUpdates(){this.updateInterval=setInterval(()=>{this.updatePopularTokenPrices()},6e4)}startAlertMonitoring(){this.alertCheckInterval=setInterval(()=>{this.checkAllActiveAlerts()},3e4)}async updatePopularTokenPrices(){const t=[{symbol:"ETH",chainType:o.EVM},{symbol:"SOL",chainType:o.SOLANA},{symbol:"APT",chainType:o.APTOS}];for(const e of t)try{await this.getPrice(e.symbol,e.chainType,!0)}catch(t){console.error(`更新 ${e.symbol} 价格失败:`,t)}}async checkAllActiveAlerts(){const t=Array.from(this.priceAlerts.values()).filter(t=>t.isActive&&!t.notificationSent);for(const e of t)try{const t=await this.getPrice(e.symbol,e.chainType);t&&this.checkPriceAlerts(e.symbol,e.chainType,t.price)}catch(t){console.error("检查警报失败:",t)}}generateAlertId(){return`alert_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}clearCache(){this.priceCache.clear(),this.historyCache.clear(),this.marketDataCache.clear()}setCacheTimeout(t){this.cacheTimeout=t}getCacheStats(){return{priceCache:this.priceCache.size,historyCache:this.historyCache.size,marketDataCache:this.marketDataCache.size}}addProvider(t){this.providers.push(t),this.providers.sort((t,e)=>t.priority-e.priority)}removeProvider(t){const e=this.providers.findIndex(e=>e.name===t);return e>-1&&(this.providers.splice(e,1),!0)}getProviderStatus(){return[...this.providers]}destroy(){this.updateInterval&&(clearInterval(this.updateInterval),this.updateInterval=null),this.alertCheckInterval&&(clearInterval(this.alertCheckInterval),this.alertCheckInterval=null),this.clearCache(),this.priceAlerts.clear(),this.providers=[]}},_.gasService=new class{constructor(){this.provider=null,this.chainConfig=null}async initialize(t){this.chainConfig=t,t.type===o.EVM&&(this.provider=new l.FR(t.rpcUrl))}async estimateGas(t){if(!this.provider||!this.chainConfig)throw new Error("Gas service not initialized");if(this.chainConfig.type!==o.EVM)throw new Error("Gas estimation only supported for EVM chains");try{const e=await this.provider.estimateGas({to:t.to,value:t.value,data:t.data||"0x"}),r=await this.provider.getFeeData();let a=r.gasPrice||u.XS("20","gwei"),s=r.maxFeePerGas,i=r.maxPriorityFeePerGas;if(s&&i){const t=e*s;return{gasLimit:e.toString(),gasPrice:a.toString(),maxFeePerGas:s.toString(),maxPriorityFeePerGas:i.toString(),estimatedCost:u.ck(t)}}{const t=e*a;return{gasLimit:e.toString(),gasPrice:a.toString(),estimatedCost:u.ck(t)}}}catch(t){throw console.error("Error estimating gas:",t),t}}async getCurrentGasPrice(){if(!this.provider||!this.chainConfig)throw new Error("Gas service not initialized");if(this.chainConfig.type!==o.EVM)throw new Error("Gas price only supported for EVM chains");try{const t=(await this.provider.getFeeData()).gasPrice||u.XS("20","gwei"),e=t*BigInt(80)/BigInt(100),r=t,a=t*BigInt(120)/BigInt(100);return{slow:u.Js(e,"gwei"),standard:u.Js(r,"gwei"),fast:u.Js(a,"gwei")}}catch(t){throw console.error("Error getting gas price:",t),t}}async getEIP1559Fees(){if(!this.provider||!this.chainConfig)throw new Error("Gas service not initialized");if(this.chainConfig.type!==o.EVM)throw new Error("EIP-1559 fees only supported for EVM chains");try{const t=await this.provider.getFeeData();if(!t.maxFeePerGas||!t.maxPriorityFeePerGas)throw new Error("EIP-1559 not supported on this network");const e=t.maxFeePerGas,r=t.maxPriorityFeePerGas;return{slow:{maxFeePerGas:u.Js(e*BigInt(80)/BigInt(100),"gwei"),maxPriorityFeePerGas:u.Js(r*BigInt(80)/BigInt(100),"gwei")},standard:{maxFeePerGas:u.Js(e,"gwei"),maxPriorityFeePerGas:u.Js(r,"gwei")},fast:{maxFeePerGas:u.Js(e*BigInt(120)/BigInt(100),"gwei"),maxPriorityFeePerGas:u.Js(r*BigInt(120)/BigInt(100),"gwei")}}}catch(t){throw console.error("Error getting EIP-1559 fees:",t),t}}async calculateTransactionCostUSD(t,e){return e?(parseFloat(t.estimatedCost)*e).toFixed(2):"0"}async optimizeGasParams(t,e="standard"){if(!this.provider||!this.chainConfig)throw new Error("Gas service not initialized");if(this.chainConfig.type!==o.EVM)return t;try{const r=await this.provider.getFeeData();if(r.maxFeePerGas&&r.maxPriorityFeePerGas){const r=(await this.getEIP1559Fees())[e];return{...t,maxFeePerGas:u.XS(r.maxFeePerGas,"gwei").toString(),maxPriorityFeePerGas:u.XS(r.maxPriorityFeePerGas,"gwei").toString()}}{const r=(await this.getCurrentGasPrice())[e];return{...t,gasPrice:u.XS(r,"gwei").toString()}}}catch(e){return console.error("Error optimizing gas params:",e),t}}async validateGasFees(t){const e=[],r=[];if(!this.provider||!this.chainConfig)return{isValid:!1,warnings:["Gas service not initialized"],suggestions:["Initialize gas service before validating fees"]};if(this.chainConfig.type!==o.EVM)return{isValid:!0,warnings:[],suggestions:[]};try{const a=await this.getCurrentGasPrice(),s=u.XS(a.standard,"gwei");if(t.gasPrice){const a=BigInt(t.gasPrice);a<s*BigInt(50)/BigInt(100)&&(e.push("Gas price is very low, transaction may take long time to confirm"),r.push("Consider increasing gas price for faster confirmation")),a>s*BigInt(200)/BigInt(100)&&(e.push("Gas price is very high, you may be overpaying"),r.push("Consider reducing gas price to save on fees"))}return{isValid:0===e.length,warnings:e,suggestions:r}}catch(t){return console.error("Error validating gas fees:",t),{isValid:!1,warnings:["Failed to validate gas fees"],suggestions:["Try again later"]}}}},_.multiChainWalletManager=new R,_.defiService=new class{constructor(){this.provider=null,this.chainConfig=null}async initialize(t){this.chainConfig=t,t.type===o.EVM&&(this.provider=new l.FR(t.rpcUrl))}async getTokenPrice(t){return 0}async getLiquidityPools(t){return[]}async swapTokens(t,e,r,a=.5){throw new Error("Token swap not implemented")}async addLiquidity(t,e,r,a){throw new Error("Add liquidity not implemented")}async removeLiquidity(t,e,r){throw new Error("Remove liquidity not implemented")}async getYieldFarms(){return[]}async stakeTokens(t,e){throw new Error("Token staking not implemented")}async unstakeTokens(t,e){throw new Error("Token unstaking not implemented")}async getStakingRewards(t,e){return"0"}async claimRewards(t){throw new Error("Claim rewards not implemented")}},_.bridgeService=new class{constructor(t,e,r){this.bridgeProtocols=[],this.bridgeTransactions=new Map,this.statusCheckInterval=null,this.chainManager=t,this.priceService=e,this.gasService=r,this.initializeBridgeProtocols(),this.startStatusMonitoring()}initializeBridgeProtocols(){this.bridgeProtocols=[{id:"wormhole",name:"Wormhole",supportedChains:["ethereum","solana","polygon","arbitrum","aptos"],fee:"0.1",estimatedTime:"5-15分钟",maxAmount:"1000000",minAmount:"0.01",supportsSVMToEVM:!0,supportsEVMToSVM:!0,gasOptimization:!0,liquidityDepth:"50000000"},{id:"layerzero",name:"LayerZero",supportedChains:["ethereum","polygon","arbitrum","optimism"],fee:"0.05",estimatedTime:"2-10分钟",maxAmount:"500000",minAmount:"0.001",supportsSVMToEVM:!1,supportsEVMToSVM:!1,gasOptimization:!0,liquidityDepth:"30000000"},{id:"allbridge",name:"Allbridge",supportedChains:["ethereum","solana","polygon","aptos"],fee:"0.15",estimatedTime:"3-12分钟",maxAmount:"100000",minAmount:"0.1",supportsSVMToEVM:!0,supportsEVMToSVM:!0,gasOptimization:!1,liquidityDepth:"20000000"},{id:"portal",name:"Portal (Wormhole)",supportedChains:["ethereum","solana","polygon","arbitrum"],fee:"0.08",estimatedTime:"5-20分钟",maxAmount:"2000000",minAmount:"0.05",supportsSVMToEVM:!0,supportsEVMToSVM:!0,gasOptimization:!0,liquidityDepth:"80000000"},{id:"celer",name:"Celer cBridge",supportedChains:["ethereum","polygon","arbitrum","optimism"],fee:"0.03",estimatedTime:"1-5分钟",maxAmount:"1500000",minAmount:"0.01",supportsSVMToEVM:!1,supportsEVMToSVM:!1,gasOptimization:!0,liquidityDepth:"40000000"}]}getSupportedBridges(t,e){return t&&e?this.bridgeProtocols.filter(r=>r.supportedChains.includes(t)&&r.supportedChains.includes(e)):this.bridgeProtocols}async getBridgeQuote(t){const e=this.getSupportedBridges(t.fromChain,t.toChain);if(0===e.length)throw new Error(`不支持从${t.fromChain}到${t.toChain}的跨链转账`);const r=[];for(const a of e)try{const e=await this.getBridgeQuoteForProtocol(t,a);r.push(e)}catch(t){console.warn(`获取${a.name}报价失败:`,t.message)}return r.sort((t,e)=>parseFloat(t.fee)-parseFloat(e.fee))}async getBridgeQuoteForProtocol(t,e){const r=parseFloat(t.amount),a=r*parseFloat(e.fee)/100,s=r-a;let i="1.0";return t.fromChain!==t.toChain&&(i=this.isSVMToEVM(t.fromChain,t.toChain)?"0.998":this.isEVMToSVM(t.fromChain,t.toChain)?"0.997":"0.999"),{fromChain:t.fromChain,toChain:t.toChain,fromAmount:t.amount,toAmount:(s*parseFloat(i)).toString(),fee:a.toString(),estimatedTime:e.estimatedTime,exchangeRate:i,bridgeProtocol:e.id}}async executeBridge(t,e,r){try{this.validateBridgeParams(t,r);const a=this.generateBridgeId();let s;switch(r.bridgeProtocol){case"wormhole":s=await this.executeWormholeBridge(t,e,r);break;case"layerzero":s=await this.executeLayerZeroBridge(t,e,r);break;case"allbridge":s=await this.executeAllbridgeBridge(t,e,r);break;case"portal":s=await this.executePortalBridge(t,e,r);break;case"celer":s=await this.executeCelerBridge(t,e,r);break;default:throw new Error(`不支持的跨链协议: ${r.bridgeProtocol}`)}return this.bridgeTransactions.set(a,{id:a,status:"processing",fromTxHash:s,fromChain:t.fromChain,toChain:t.toChain,amount:t.amount,token:t.token,estimatedCompletion:Date.now()+this.parseEstimatedTime(r.estimatedTime),bridgeProtocol:r.bridgeProtocol,createdAt:Date.now(),updatedAt:Date.now(),confirmations:0,requiredConfirmations:this.getRequiredConfirmations(t.fromChain),retryCount:0}),a}catch(t){throw new Error(`执行跨链转账失败: ${t.message}`)}}async executeWormholeBridge(t,e,r){const a=this.chainManager.getChainType(t.fromChain);if(a===o.SOLANA)return this.executeWormholeSolana(t,e);if(a===o.EVM)return this.executeWormholeEVM(t,e);throw new Error(`Wormhole不支持的链类型: ${a}`)}async executeWormholeSolana(t,e){const r={to:"3u8hJUVTA4jH1wYAyUur7FFZVQ8H635K3tSHHF4ssjQ5",value:t.amount,data:this.buildWormholeSolanaData(t),chainType:o.SOLANA,from:t.recipient};return(await this.chainManager.sendTransaction(r,e,t.fromChain)).hash}async executeWormholeEVM(t,e){const r={ethereum:"0x3ee18B2214AFF97000D974cf647E7C347E8fa585",polygon:"0x7A4B5a56256163F07b2C80A7cA55aBE66c4ec4d7",arbitrum:"0xa5f208e072434bC67592E4C49C1B991BA79BCA46"}[t.fromChain];if(!r)throw new Error(`不支持的Wormhole EVM链: ${t.fromChain}`);const a={to:r,value:"ETH"===t.token?t.amount:"0",data:this.buildWormholeEVMData(t),chainType:o.EVM,from:t.recipient};return(await this.chainManager.sendTransaction(a,e,t.fromChain)).hash}async executeLayerZeroBridge(t,e,r){const a={ethereum:"0x66A71Dcef29A0fFBDBE3c6a460a3B5BC225Cd675",polygon:"0x3c2269811836af69497E5F486A85D7316753cf62",arbitrum:"0x3c2269811836af69497E5F486A85D7316753cf62"}[t.fromChain];if(!a)throw new Error(`不支持的LayerZero链: ${t.fromChain}`);const s={to:a,value:"ETH"===t.token?t.amount:"0",data:this.buildLayerZeroData(t),chainType:o.EVM,from:t.recipient};return(await this.chainManager.sendTransaction(s,e,t.fromChain)).hash}async executeAllbridgeBridge(t,e,r){return this.executeGenericBridge(t,e,"allbridge")}async executePortalBridge(t,e,r){return this.executeGenericBridge(t,e,"portal")}async executeCelerBridge(t,e,r){return this.executeGenericBridge(t,e,"celer")}async executeGenericBridge(t,e,r){const a={allbridge:{ethereum:"0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE",solana:"A11bridge11111111111111111111111111111111111",polygon:"0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"},portal:{ethereum:"0x3ee18B2214AFF97000D974cf647E7C347E8fa585",solana:"worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth",polygon:"0x7A4B5a56256163F07b2C80A7cA55aBE66c4ec4d7"},celer:{ethereum:"0x5427FEFA711Eff984124bFBB1AB6fbf5E3DA1820",polygon:"0x88DCDC47D2f83a99CF0000FDF667A468bB958a78",arbitrum:"0x1619DE6B6B20eD217a58d00f37B9d47C7663feca"}}[r]?.[t.fromChain];if(!a)throw new Error(`${r}不支持链: ${t.fromChain}`);const s={to:a,value:"ETH"===t.token||"SOL"===t.token?t.amount:"0",data:"0x",chainType:o.EVM,from:t.recipient};return(await this.chainManager.sendTransaction(s,e,t.fromChain)).hash}getBridgeStatus(t){return this.bridgeTransactions.get(t)||null}updateBridgeStatus(t,e){const r=this.bridgeTransactions.get(t);r&&this.bridgeTransactions.set(t,{...r,...e})}getAllBridgeTransactions(){return Array.from(this.bridgeTransactions.values())}validateBridgeParams(t,e){const r=parseFloat(t.amount),a=this.bridgeProtocols.find(t=>t.id===e.bridgeProtocol);if(!a)throw new Error("无效的跨链协议");if(r<parseFloat(a.minAmount))throw new Error(`转账金额不能小于${a.minAmount}`);if(r>parseFloat(a.maxAmount))throw new Error(`转账金额不能大于${a.maxAmount}`);if(!this.chainManager.validateAddress(t.recipient,t.toChain))throw new Error("无效的接收地址")}generateBridgeId(){return"bridge_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}parseEstimatedTime(t){const e=t.match(/(\d+)-(\d+)分钟/);return e?(parseInt(e[1])+parseInt(e[2]))/2*60*1e3:6e5}isSVMToEVM(t,e){return["solana"].includes(t)&&["ethereum","polygon","arbitrum","optimism"].includes(e)}isEVMToSVM(t,e){return["ethereum","polygon","arbitrum","optimism"].includes(t)&&["solana"].includes(e)}buildWormholeSolanaData(t){return""}buildWormholeEVMData(t){return"0x"}buildLayerZeroData(t){return"0x"}getRequiredConfirmations(t){return{ethereum:12,polygon:20,arbitrum:1,optimism:1,solana:32,aptos:10}[t]||6}startStatusMonitoring(){this.statusCheckInterval=setInterval(()=>{this.checkPendingTransactions()},3e4)}async checkPendingTransactions(){for(const[t,e]of this.bridgeTransactions)if("processing"===e.status||"confirming"===e.status)try{await this.updateTransactionStatus(t,e)}catch(e){console.error(`更新交易状态失败 ${t}:`,e.message)}}async updateTransactionStatus(t,e){if(e.fromTxHash)try{const r=await this.chainManager.getTransactionStatus(e.fromTxHash,e.fromChain);if("confirmed"===r.status){const a=r.blockNumber?Math.max(0,r.blockNumber-(e.confirmations||0)):0,s=e.requiredConfirmations||6;this.updateBridgeStatus(t,{confirmations:a,updatedAt:Date.now()}),a>=s&&"processing"===e.status&&(this.updateBridgeStatus(t,{status:"confirming",updatedAt:Date.now()}),await this.monitorDestinationTransaction(t,e))}}catch(r){console.error("检查交易状态失败:",r.message);const a=(e.retryCount||0)+1;a>=5?this.updateBridgeStatus(t,{status:"failed",errorMessage:r.message,retryCount:a,updatedAt:Date.now()}):this.updateBridgeStatus(t,{retryCount:a,updatedAt:Date.now()})}}async monitorDestinationTransaction(t,e){setTimeout(()=>{this.updateBridgeStatus(t,{status:"completed",toTxHash:"mock_destination_tx_hash_"+Date.now(),updatedAt:Date.now()})},6e4)}async getEnhancedBridgeQuote(t,e){const r=await this.getBridgeQuote(t),a=[];for(const s of r)try{const r=await this.estimateGasCost(t,s,e),i=(parseFloat(s.fee)+parseFloat(r)).toString(),n=await this.calculatePriceImpact(t,s),o=this.calculateLiquidityUtilization(t,s),c=this.calculateConfidence(s),l=this.buildRoute(t,s);a.push({...s,gasCost:r,totalCost:i,priceImpact:n,liquidityUtilization:o,confidence:c,route:l})}catch(t){console.warn("生成增强报价失败:",t.message)}return this.sortQuotesByOptimization(a,e)}async estimateGasCost(t,e,r){try{const a=r?.gasPrice||await this.getOptimalGasPrice(t.fromChain),s=await this.estimateGasLimit(t,e);return(parseFloat(a)*parseFloat(s)).toString()}catch(t){return"0.001"}}async getOptimalGasPrice(t){try{const e=this.chainManager.getAdapter(t).getChainConfig();return await this.gasService.initialize(e),(await this.gasService.getCurrentGasPrice()).standard}catch(e){return{ethereum:"20000000000",polygon:"30000000000",arbitrum:"1000000000",optimism:"1000000000",solana:"5000"}[t]||"20000000000"}}async estimateGasLimit(t,e){return{wormhole:"200000",allbridge:"150000",portal:"180000",layerzero:"120000",celer:"100000"}[e.bridgeProtocol]||"150000"}async calculatePriceImpact(t,e){try{const r=parseFloat(t.amount),a=this.bridgeProtocols.find(t=>t.id===e.bridgeProtocol);if(!a)return"0";const s=r/parseFloat(a.liquidityDepth||"0")*100;return Math.min(s,5).toFixed(4)}catch(t){return"0"}}calculateLiquidityUtilization(t,e){try{const r=parseFloat(t.amount),a=this.bridgeProtocols.find(t=>t.id===e.bridgeProtocol);if(!a)return"0";const s=r/parseFloat(a.liquidityDepth||"0")*100;return Math.min(s,100).toFixed(2)}catch(t){return"0"}}calculateConfidence(t){const e=this.bridgeProtocols.find(e=>e.id===t.bridgeProtocol);if(!e)return 50;let r=70;return e.gasOptimization&&(r+=10),parseFloat(e.liquidityDepth||"0")>5e7&&(r+=15),parseFloat(e.fee)<.1&&(r+=5),Math.min(r,100)}buildRoute(t,e){const r=[t.fromChain];return"layerzero"===e.bridgeProtocol&&"ethereum"!==t.fromChain&&"ethereum"!==t.toChain&&r.push("ethereum"),r.push(t.toChain),r}sortQuotesByOptimization(t,e){return e?e.prioritizeSpeed?t.sort((t,e)=>this.parseEstimatedTime(t.estimatedTime)-this.parseEstimatedTime(e.estimatedTime)):e.prioritizeCost?t.sort((t,e)=>parseFloat(t.totalCost)-parseFloat(e.totalCost)):t.sort((t,e)=>{const r=this.calculateOverallScore(t);return this.calculateOverallScore(e)-r}):t.sort((t,e)=>parseFloat(t.totalCost)-parseFloat(e.totalCost))}calculateOverallScore(t){return.4*(100-10*parseFloat(t.totalCost))+.3*(100-this.parseEstimatedTime(t.estimatedTime)/6e4)+.3*t.confidence}getSVMToEVMBridges(){return this.bridgeProtocols.filter(t=>t.supportsSVMToEVM)}getEVMToSVMBridges(){return this.bridgeProtocols.filter(t=>t.supportsEVMToSVM)}async executeSVMToEVMBridge(t,e,r){const a=this.bridgeProtocols.find(t=>t.id===r.bridgeProtocol);if(!a?.supportsSVMToEVM)throw new Error(`协议 ${r.bridgeProtocol} 不支持SVM到EVM跨链`);return this.executeBridge(t,e,r)}destroy(){this.statusCheckInterval&&(clearInterval(this.statusCheckInterval),this.statusCheckInterval=null)}}(_.chainManager,_.priceService,_.gasService),_.nftService=new class{constructor(t){this.metadataCache=new Map,this.collectionCache=new Map,this.walletManager=t}async getUserNFTs(t,e){const r=this.walletManager.getAdapter(e);if(!r)throw new Error(`不支持的链: ${e}`);try{const e=await r.getNFTs(t);return await Promise.all(e.map(async e=>{try{const r=e.image||"",a=r?await this.getNFTMetadata(r):null;return{tokenId:e.tokenId,contractAddress:e.contractAddress,chainId:e.chainId,owner:t,tokenURI:r,metadata:a||void 0,standard:"ERC721"}}catch(r){return console.warn(`Failed to fetch metadata for NFT ${e.tokenId}:`,r),{tokenId:e.tokenId,contractAddress:e.contractAddress,chainId:e.chainId,owner:t,tokenURI:e.image||"",standard:"ERC721"}}}))}catch(r){throw console.error(`Failed to fetch NFTs for ${t} on ${e}:`,r),r}}async getNFTDetails(t,e,r){if(!this.walletManager.getAdapter(r))throw new Error(`不支持的链: ${r}`);try{return null}catch(t){return console.error("Failed to fetch NFT details:",t),null}}async getNFTMetadata(t){if(!t)return null;if(this.metadataCache.has(t))return this.metadataCache.get(t);try{let e=t;t.startsWith("ipfs://")&&(e=t.replace("ipfs://","https://ipfs.io/ipfs/"));const r=await fetch(e);if(!r.ok)throw new Error(`HTTP ${r.status}`);const a=await r.json();return a.image&&a.image.startsWith("ipfs://")&&(a.image=a.image.replace("ipfs://","https://ipfs.io/ipfs/")),this.metadataCache.set(t,a),a}catch(e){return console.error(`Failed to fetch metadata from ${t}:`,e),null}}async transferNFT(t){if(!this.walletManager.getAdapter(t.chainId))throw new Error(`不支持的链: ${t.chainId}`);const e=this.walletManager.getWallet(t.chainId);if(!e)throw new Error(`未找到${t.chainId}链的钱包`);if(t.from.toLowerCase()!==e.address.toLowerCase())throw new Error("只能转移自己拥有的NFT");if(!this.walletManager.validateAddress(t.chainId,t.to))throw new Error("无效的接收地址");try{throw new Error("NFT transfer implementation needed")}catch(t){throw console.error("NFT transfer failed:",t),t}}async approveNFT(t){if(!this.walletManager.getAdapter(t.chainId))throw new Error(`不支持的链: ${t.chainId}`);if(!this.walletManager.getWallet(t.chainId))throw new Error(`未找到${t.chainId}链的钱包`);try{throw new Error("NFT approval implementation needed")}catch(t){throw console.error("NFT approval failed:",t),t}}async mintNFT(t){if(!this.walletManager.getAdapter(t.chainId))throw new Error(`不支持的链: ${t.chainId}`);if(!this.walletManager.getWallet(t.chainId))throw new Error(`未找到${t.chainId}链的钱包`);try{throw new Error("NFT minting implementation needed")}catch(t){throw console.error("NFT minting failed:",t),t}}async getCollectionInfo(t,e){const r=`${e}:${t}`;if(this.collectionCache.has(r))return this.collectionCache.get(r);try{throw new Error("Collection info query implementation needed")}catch(t){return console.error("Failed to fetch collection info:",t),null}}async searchCollections(t,e,r=20){try{throw new Error("Collection search implementation needed")}catch(t){return console.error("Collection search failed:",t),[]}}async getNFTPriceHistory(t,e,r,a=30){try{throw new Error("NFT price history implementation needed")}catch(t){return console.error("Failed to fetch NFT price history:",t),[]}}async getNFTMarketOrders(t,e,r){try{throw new Error("NFT market orders implementation needed")}catch(t){return console.error("Failed to fetch NFT market orders:",t),[]}}async getUserNFTTransactions(t,e,r=50){try{throw new Error("NFT transaction history implementation needed")}catch(t){return console.error("Failed to fetch NFT transaction history:",t),[]}}async verifyNFTOwnership(t,e,r,a){try{if(!this.walletManager.getAdapter(a))throw new Error(`不支持的链: ${a}`);throw new Error("NFT ownership verification implementation needed")}catch(t){return console.error("NFT ownership verification failed:",t),!1}}async getNFTRarity(t,e,r){try{throw new Error("NFT rarity query implementation needed")}catch(t){return console.error("Failed to fetch NFT rarity:",t),null}}clearCache(){this.metadataCache.clear(),this.collectionCache.clear()}getCacheStats(){return{metadataCount:this.metadataCache.size,collectionCount:this.collectionCache.size}}}(_.multiChainWalletManager),_.multiChainWallets={},console.log("ShieldWallet 后台脚本已加载"),console.log("服务已准备就绪"),chrome.runtime.onMessage.addListener((t,e,r)=>{switch(console.log("收到消息:",t.type),t.type){case"CHECK_WALLET_EXISTS":return async function(){try{return{success:!0,exists:await _.walletExists()}}catch(t){return console.error("检查钱包存在出错:",t),{success:!1,error:"检查钱包状态失败"}}}().then(r),!0;case"CREATE_WALLET":return async function(t){try{const e=await _.createWallet(t);return{success:!0,mnemonic:e.mnemonic,address:e.wallet.address}}catch(t){return console.error("创建钱包出错:",t),{success:!1,error:"创建钱包失败"}}}(t.data.password).then(r),!0;case"IMPORT_WALLET":return async function(t){try{const{type:e,value:r,password:a}=t;return{success:!0,address:(await _.importWallet(r,e,a)).wallet.address}}catch(t){return console.error("导入钱包出错:",t),{success:!1,error:"导入钱包失败"}}}(t.data).then(r),!0;case"GET_ACCOUNT_INFO":return async function(){try{if(!_.isWalletUnlocked())return{success:!1,error:"钱包未解锁"};return{success:!0,address:_.getCurrentAddress(),balance:await _.getBalance(),isUnlocked:!0}}catch(t){return console.error("获取账户信息出错:",t),{success:!1,error:"获取账户信息失败"}}}().then(r),!0;case"SEND_TRANSACTION":return async function(t){try{const{to:e,amount:r,gasPrice:a,gasLimit:s,password:i}=t,n={to:e,value:r,gasPrice:a,gasLimit:s||"21000"};return{success:!0,txHash:await _.sendTransaction(n,i)}}catch(t){return console.error("发送交易出错:",t),{success:!1,error:"发送交易失败"}}}(t.data).then(r),!0;case"SWITCH_NETWORK":return async function(t){try{return await i.saveCurrentNetwork(t),{success:!0}}catch(t){return console.error("切换网络出错:",t),{success:!1,error:"切换网络失败"}}}(t.data.networkId).then(r),!0;default:return r({success:!1,error:"未知请求类型"}),!1}})},7790:()=>{},9838:()=>{}},r={};function a(t){var s=r[t];if(void 0!==s)return s.exports;var i=r[t]={id:t,loaded:!1,exports:{}};return e[t].call(i.exports,i,i.exports,a),i.loaded=!0,i.exports}a.m=e,t=[],a.O=(e,r,s,i)=>{if(!r){var n=1/0;for(h=0;h<t.length;h++){for(var[r,s,i]=t[h],o=!0,c=0;c<r.length;c++)(!1&i||n>=i)&&Object.keys(a.O).every(t=>a.O[t](r[c]))?r.splice(c--,1):(o=!1,i<n&&(n=i));if(o){t.splice(h--,1);var l=s();void 0!==l&&(e=l)}}return e}i=i||0;for(var h=t.length;h>0&&t[h-1][2]>i;h--)t[h]=t[h-1];t[h]=[r,s,i]},a.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return a.d(e,{a:e}),e},a.d=(t,e)=>{for(var r in e)a.o(e,r)&&!a.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),a.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t={471:0};a.O.j=e=>0===t[e];var e=(e,r)=>{var s,i,[n,o,c]=r,l=0;if(n.some(e=>0!==t[e])){for(s in o)a.o(o,s)&&(a.m[s]=o[s]);if(c)var h=c(a)}for(e&&e(r);l<n.length;l++)i=n[l],a.o(t,i)&&t[i]&&t[i][0](),t[i]=0;return a.O(h)},r=self.webpackChunkshieldwallet=self.webpackChunkshieldwallet||[];r.forEach(e.bind(null,0)),r.push=e.bind(null,r.push.bind(r))})();var s=a.O(void 0,[96],()=>a(7746));s=a.O(s)})();